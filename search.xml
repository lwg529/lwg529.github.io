<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LeetCode每日一练]]></title>
    <url>%2F2019%2F03%2F17%2Fleetcode-2019-03-17%2F</url>
    <content type="text"><![CDATA[题目，191. Number of 1 Bits123Input: 00000000000000000000000000001011Output: 3Explanation: The input binary string 00000000000000000000000000001011 has a total of three &apos;1&apos; bits. 解析 循环，每位和1与，不等于0，则count加1 1234567891011var hammingWeight = function(n) &#123; let count = 0; let mask = 1; for(let i = 0; i&lt; 32; i++) &#123; if((n&amp;mask) !== 0) &#123; count ++; &#125; mask &lt;&lt;= 1; // mask = mask*2;相当于1的位置左移 &#125; return count;&#125;; n&amp;(n-1)解法 1234假设n = 1 0 0 1 0 0 n-1= 1 0 0 0 1 1 n&amp;(n-1)=1 0 0 n和n-1只有最后的几位不一样，与运算之后，只剩下了前面相同的部分（100）,1的个数正好减少了1个 12345678var hammingWeight = function(n) &#123; let sum = 0; while (n != 0) &#123; sum++; n &amp;= (n - 1); &#125; return sum;&#125;;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mobx使用及最佳实践]]></title>
    <url>%2F2019%2F03%2F17%2Fmobx%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[mobx是一个简单、可扩展的状态管理库 什么是状态管理首先我们来想一下这些问题，什么是状态管理，为什么要使用状态管理？ 当我们构建一个前端应用时，组件内部都会有一些状态，使用this.state和setState就可以解决发部分问题。 当应用越来越复杂，出现了兄弟组件之间的通信，跨级组件通信，就需要把所有的状态存储到共同的祖先，通过props层层传递，状态发生变化时，在通过层层的传递，通知祖先组件。在一个大型应用中，状态的管理就会变得异常的复杂混乱。 因此我们需要状态管理库。所有组件的公共状态统一存在一个store中，修改和更新状态也在store中。每个组件中都可以直接获取store中状态，并且修改它。 mobx 原理 通俗一点的解释就是，事件触发actions，更改了store中的数据，然后计算值和UI都会更新。 基本概念Actions：任何可以改变状态的代码，都是actions。最容易理解的是用户事件（点击按钮） State：存储的全局状态，数据。 Observable：可以被观察的值，不仅原始值可以被观察，引用值也可以被观察，比如对象，数组。当数据被观察后，使用可观察值的组件，会在观察值变化后，自动重新渲染。 Computed values：相关数据变化可以计算出的值，比如一个可观察数组的长度，就是一个计算值。计算值不是实时更新的，只有使用时，才会更新，不再使用时，会自动被垃圾回收。 Reactions：数据变化是的一些变化，比如发起请求，更新React组件等 observer：react组件增加observer装饰，就会从无状态的组件变成响应式组件，当组件使用了可观察的值，可观察的值变化时组件会自动重新渲染。 自定义 reactions：当unfinishedTodoCount变化时，自动打印日志123autorun(() =&gt; &#123; console.log(&quot;Tasks left: &quot; + todos.unfinishedTodoCount)&#125;) mobx使用 定义一个可观察的状态 定义了一个可观察状态timer，初始值为012345import &#123;observable&#125; from &apos;mobx&apos;;var appState = observable(&#123; timer: 0&#125;); 定义响应式组件，触发action改变state定义了一个响应式组件TimerView，button点击调用resetTimer，页面上 Seconds passed显示当前的timer的值 123456789101112131415161718import &#123;observer&#125; from &apos;mobx-react&apos;;@observerclass TimerView extends React.Component &#123; render() &#123; return ( &lt;button onClick=&#123;this.onReset.bind(this)&#125;&gt; Seconds passed: &#123;this.props.appState.timer&#125; &lt;/button&gt; ); &#125; onReset() &#123; this.props.appState.resetTimer(); &#125;&#125;;ReactDOM.render(&lt;TimerView appState=&#123;appState&#125; /&gt;, document.body); 更改状态resetTimer函数将timer置为0，定时函数令timer每秒加1. 1234567appState.resetTimer = action(function reset() &#123; appState.timer = 0;&#125;);setInterval(action(function tick() &#123; appState.timer += 1;&#125;), 1000); 这就是mobx工作的过程。先定义一些全局共享的状态，比如timer，并且使其可观察。然后定义响应式的组件，组件中使用了timer，当timer更新时，组件会自动重新渲染。组件中的按钮点击事件，又会触发action，造成state中的timer更新。 这就是mobx的工作流程，action改变state，state改变会更新所有受影响的view。当state更新时，所有依赖这些状态的组件，都会开始细颗粒度的更新。1actions -------&gt; state --------&gt; views mobx-react 渲染性能优化原理我们可以通过使用@observer，将react组件转换成一个监听者(Reactions)，这样在被监听的应用状态变量(Observable)有更新时，react组件就会重新渲染。如下代码中，TodoItemModel中的应用状态变量有更新时，TodoItem UI会重新渲染: 123456789101112131415161718192021222324class TodoItemModel &#123; id @observable title; @observable completed; ......&#125;@observerclass TodoItem extends React.Component &#123; ..... render() &#123; //UI logic code ... let todo = this.props.todo; let title = todo.title; let complete = todo.complete; return ( .... ); &#125;&#125;var todoItem = new TodoItemModel();todoItem.title = &apos;&apos;; 在使用react的过程中，我们绕不开渲染性能优化问题，因为默认情况下react组件的shouldComponentUpdate函数会一直返回true，这回导致所有的组件都会进行耗时的虚拟DOM比较。在使用redux作为react的逻辑层框架时，我们可以使用经典的PureComponent+ShallowCompare的方式进行渲染性能优化，那么在使用mobx作为react的store时，我们该如何进行渲染性能优化呢？ (1). 默认的基本渲染性能优化通过分析源代码发现，在使用@observer将react组件转换成一个监听者(Reactions)后，mobx会为react组件提供一个精确的、细粒度的shouldComponentUpdate函数:123456789shouldComponentUpdate: function(nextProps, nextState) &#123; ...... // update on any state changes (as is the default) if (this.state !== nextState) &#123; return true; &#125; // update if props are shallowly not equal return isObjectShallowModified(this.props, nextProps);&#125; 借助于mobx框架对Observable变量引用的跟踪和依赖收集，mobx能够精确地得到react组件对Observable变量的依赖图谱，然后再用经典的ShallowCompare实现细粒度的shouldComponentUpdate函数，以达到100%无浪费render。这一切都是自动完成地，fantastic！使用mobx后，我们再也无需手动写shouldComponentUpdate函数了。 (2). 使用transaction进行高级渲染性能优化mobx在带来便利性的同时，也可能引入新的问题。上文反复提到：mobx会记录监听者(Reactions)中对Observable变量的引用，通过引用在运行时动态地构建依赖图谱，从而实现精确地、细粒度地更新。 如果一个React组件依赖于多个应用状态(Observable)变量，而一次操作需要更新多个应用状态(Observable)变量时，React组件就会进行多次渲染。在有些场景下，更新地粒度过细，也不是我们希望看到的场景。比如如下代码，调用TodoItemModel的reset方法设置了两个应用状态变量，会导致对应的UI组件重新渲染两次： 1234567891011121314151617181920212223242526272829303132333435//todoItem UI组件，依赖于应用状态变量completed和title@observerclass TodoItem extends React.Component &#123; ... render() &#123; //UI logic code ... let todo = this.props.todo; let title = todo.title; let completed = todo.complete; return ( ...... ); &#125;&#125;class TodoItemModel &#123; id; @observable title; @observable completed; ...... reset() &#123; /* 分别设置title和completed值， 会触发两次todoItem UI组件的重新渲染 */ this.completed = false; this.title= &apos;&apos;; &#125; ......&#125;var todoItem = new TodoItemModel();//调用reset将触发两次TodoItem UI组件的重新渲染todoItem.reset(); 在语义层面，有时我们需要将多个应用状态(Observable)的更新，视为一次操作，并希望只触发一次监听者(Reactions)的动作(UI更新、网络请求等)。为此mobx提供了transaction功能，可以将对多个应用状态(Observable)的更新封装成一个事务，只有在事务执行完成后，才会触发一次对应的监听者(Reactions)。这就使得我们对组件的渲染有更精细化的控制。比如如下代码，使用transaction后，对应用状态(Observable)的两次更新只会触发一次UI的更新。 123456789101112131415161718192021class TodoItemModel &#123; id; @observable title; @observable completed; ...... reset() &#123; /* 使用transaction设置title和completed值， 只会在函数调用结束后触发一次todoItem UI组件的重新渲染 */ transaction(()=&gt;&#123; this.completed = false; this.title= &apos;&apos;; &#125;) &#125; ......&#125;var todoItem = new TodoItemModel();//调用reset只触发一次TodoItem UI组件的重新渲染todoItem.reset(); 最佳实践所有更改state都用action使用action后，可以清楚的看出，哪些代码可以更改可观察的变量。 使用action，方便调试工具给出更多的信息 使用transaction可以将多个应用状态(Observable)的更新视为一次操作，并只触发一次监听者(Reactions)的动作(UI更新、网络请求等)，避免多次重复渲染。action中封装了transaction，多次改变@observable变量时，只会重新渲染一次，提高了性能。 12345678910111213@autobindclass TodoItemModel &#123; id; @observable title; @observable completed; //使用action后，reset函数执行完成后，才会触发一次其监听者 @action reset() &#123; this.completed = false; this.title= &apos;&apos;; &#125;&#125; 假设某个组件使用了reset函数，虽然对2个可观察对象completed和title都改变了，但是只会触发一下。 所有的action都放在store中把所有的状态改变都放在store中，不要散落在各个组件中。在排查问题时，各个组件都可以修改状态，很难定位是哪儿的问题。数据的变化都放在store中，看起来更清晰，也更好维护。 使用compute属性compute的值是延迟更新的，只有在使用的时候，才会自动计算。不再使用时，它会自动被垃圾回收。因此使用compute的值可以提高性能。 组件使用@observer如果一个组件需要使用@observable变量（应用状态），就应该使用@observer修饰符。@observer可以将 React 组件转变成响应式组件，确保任何组件渲染中使用的数据变化时都可以强制刷新组件。借助于精确的依赖分析，mobx可以得出组件对@observable变量（应用状态）的依赖图谱，对使用@observer进行标记的组件，实现精准的shouldComponentUpdate函数，保证组件100%无浪费渲染。如果我们不对子组件使用@observer，我们就放弃了mobx对React组件的默认性能优化。 常见的问题参考：https://foio.github.io/mobx-react/https://segmentfault.com/a/1190000011148981]]></content>
      <categories>
        <category>mobx</category>
      </categories>
      <tags>
        <tag>mobx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode每日一练]]></title>
    <url>%2F2019%2F03%2F16%2Fleetcode-2019-03-16%2F</url>
    <content type="text"><![CDATA[题目，Path Sum III123456789101112131415root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8 10 / \ 5 -3 / \ \ 3 2 11 / \ \3 -2 1Return 3. The paths that sum to 8 are:1. 5 -&gt; 32. 5 -&gt; 2 -&gt; 13. -3 -&gt; 11 解析从整个树寻找和为sum = （左子树和为sum） + （右子树和为sum）+ （带根节点和为sum）12345678910111213141516let pathSum = function(root, sum) &#123; if (!root) return 0; return sumHelper(root, 0, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);&#125;;let sumHelper = (root, pre, sum) =&gt; &#123; let count = 0; if (!root) return 0; //先求出之前的pre和当前节点的和 let total = pre + root.val; // total === sum,则寻找到了一组，值为1，不相等，则是0. 然后从左右子树找pre为total，和为sum的组合 if(total === sum) &#123; count = 1; &#125; return count + sumHelper(root.left, total, sum) + sumHelper(root.right, total, sum);&#125;;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode每日一练]]></title>
    <url>%2F2019%2F03%2F15%2Fleetcode-2019-03-15%2F</url>
    <content type="text"><![CDATA[题目，Remove Duplicates from Sorted ListInput: 1-&gt;1-&gt;2Output: 1-&gt;2 Input: 1-&gt;1-&gt;2-&gt;3-&gt;3Output: 1-&gt;2-&gt;3 解析删去有序链表中重复的元素 维护两个指针，一个指向当前不重复的最后一个元素，另一个进行依次扫描，遇到不重复的则更新第一个指针，继续扫描，否则就把前面指针指向当前元素的下一个（即把当前元素从链表中删除）。假设数组长度为N, 时间复杂度为O(N),空间复杂度为O(1)(2个指针占用的空间) 123456789101112131415var deleteDuplicates = function(head) &#123; if(!head) return head; if(head &amp;&amp; !head.next) return head; let current = head; let currentNext = head.next; while(currentNext !== null) &#123; if(currentNext.val === current.val) &#123; current.next = currentNext.next; &#125; else &#123; current = currentNext; &#125; currentNext = currentNext.next; &#125; return head;&#125;; 递归实现假设数组长度为N, 时间复杂度为O(N),空间复杂度为O(1)(2个指针占用的空间) 12345678910var deleteDuplicates = function(head) &#123; if(!head) return head; if(head &amp;&amp; !head.next) return head; let currentNode = head; deleteDuplicates(currentNode.next) if(currentNode.val === currentNode.next.val)&#123; currentNode.next = currentNode.next.next; &#125; return currentNode;&#125;;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode每日一练]]></title>
    <url>%2F2019%2F03%2F14%2Fleetcode-2019-03-14%2F</url>
    <content type="text"><![CDATA[题目，Middle of the Linked ListInput: [1,2,3,4,5]Output: Node 3 from this list (Serialization: [3,4,5])The returned node has value 3. (The judge’s serialization of this node is [3,4,5]).Note that we returned a ListNode object ans, such that:ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. Input: [1,2,3,4,5,6]Output: Node 4 from this list (Serialization: [4,5,6])Since the list has two middle nodes with values 3 and 4, we return the second one. 解析求中位数，如果是数组的长度是奇数，直接返回中间数，如果是偶数，返回中间2个数的第二个数。 最直接的想法就是，把所有的元素放入一个数组中，求中间的数字假设数组长度为N, 时间复杂度为O(N),空间复杂度为O(N)(数组占用的空间) 12345678var middleNode = function(head) &#123; // 把所有的元素装到一个数组中，然后求中位数 let arr = [head]; while(arr[arr.length -1].next !== null)&#123; arr.push(arr[arr.length -1].next) &#125; return arr[Math.trunc(arr.length/2)]&#125;; 设置2个指针，一快一满，快的是慢的移动速度的2倍，快的到达数组结尾时，慢的正好在中间假设数组长度为N, 时间复杂度为O(N),空间复杂度为O(1)(2个指针占用的空间) 12345678var middleNode = function(head) &#123; let slow = fast = head; while(fast &amp;&amp; fast.next !== null)&#123; slow = slow.next; fast = fast.next.next; &#125; return slow;&#125;;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019学习目标]]></title>
    <url>%2F2019%2F03%2F11%2F2019%E5%B9%B4%E7%9B%AE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[前言工作一年多快2年了，中间还换了一次工作，2019，不忘初心，给自己一个目标，并努力的实现，越努力，越幸运。 目标 读6本书，红宝书， es6，react，不知道的js 写博客，1月2篇，共24篇 刷题，一天一道，365道题 其他书籍读2-4本]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[js数据类型判断和转换]]></title>
    <url>%2F2019%2F03%2F11%2Fjs%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E5%92%8C%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[前言无论笔试还是面试，总会问到数据类型和隐式转换。今天彻底整理一下这块的知识，希望对大家有帮助。 看到下面的题，是不是已经蒙了，读完这篇文章，就能顺利通关了1234567891011121314151617181920212223console.log([] == 0) //true console.log(![] == 0) //true console.log([] == ![]) //trueconsole.log([] == []) //falseconsole.log(&#123;&#125; == &#123;&#125;) //falseconsole.log(&#123;&#125; == !&#123;&#125;) //falseconsole.log([] == false) //trueconsole.log(&#123;&#125; == false) //falseif([]) &#123;console.log(3)&#125; //3 if([1] == [1])&#123;console.log(4)&#125; //没有输出console.log(&apos;2&apos; &gt; 10) //falseconsole.log(&apos;2&apos; &gt; &apos;10&apos;) //true 数据类型判断数据类型js数据类型一共有7种，undefined、 null、 boolean 、string、 number、 object、 Symbol 类型判断typeof12345678910111213typeof undefined //undefinedtypeof true //booleantypeof 42 //numbertypeof &apos;42&apos; //stringtypeof &#123; life: 42 &#125; //objectlet s = Symbol();typeof s //symbol//特殊情况typeof [1,2,3,4]// objecttypeof null //objecttypeof new Date() //objecttypeof function () &#123;&#125; //function 由此可以看出，typeof不能区分数组， null和对象 Object.prototype.toString.call1234567891011121314151617let getType=Object.prototype.toString;getType.call(undefined) //[object Undefined]console.log(getType.call(true)) //[object Boolean]console.log(getType.call(42)) //[object Number]console.log(getType.call(Symbol()))//[object Symbol]console.log(getType.call([1,2,3,4])) //[object Array]console.log(getType.call(null))//[object Null]console.log(getType.call(new Date())) //[object Date]console.log(getType.call(function () &#123;&#125; )) //[object Function] instanceofinstanceof运算符返回一个布尔值，表示对象是否为某个构造函数的实例。 instanceof运算符的左边是实例对象，右边是构造函数。它会检查右边构建函数的原型对象（prototype），是否在左边对象的原型链上。 12new Date instanceof Date //true[1,2,3] instanceof Array //true instanceof运算符只能用于对象，不适用原始类型的值。 constructor 属性prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。 12function P() &#123;&#125;P.prototype.constructor === P // true 12[1,2].constructor === Array //true&apos;123&apos;.constructor === String //true 面试常问怎么判断是不是数组instanceof、constructor、Object.prototype.toString.call、Array.isArray 1234[1,2] instanceof Array //true[1,2].constructor === Array //trueObject.prototype.toString.call([1,2]) === &apos;[object Array]&apos; //trueArray.isArray([1,2]) //true 如何判断一个对象是不是空对象转换成json字符串判断1JSON.stringify(&#123;&#125;) == &quot;&#123;&#125;&quot; for in 循环判断 1234567let isEmptyObject = function(obj) &#123; for (let key in obj) &#123; return false; &#125; return true;&#125;console.log(isEmptyObject(obj));//true 使用ES6的Object.keys() 1Object.keys(&#123;&#125;).length === 0 类似的数组转化成数组类数组和数组都可以读写，获取长度，遍历，但是类数组不能调用数组的方法，比如push等 1Array.prototype.slice.call(arguments) 或者Array.from(arguments) 字符串翻转‘abc’.split(‘’).reverse().join(‘’) 字符串和数组转换[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].join(&#39;&#39;) //&#39;abc&#39;1&apos;abc&apos;.split(&apos;&apos;) //[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;] 类型转换显示类型转换转成数字，Number()、parseInt()、parseFloat()123456789101112131415161718192021222324252627282930// 数值：转换后还是原来的值Number(324) // 324// 字符串：如果可以被解析为数值，则转换为相应的数值Number(&apos;324&apos;) // 324// 字符串：如果不可以被解析为数值，返回 NaNNumber(&apos;324abc&apos;) // NaN// 空字符串转为0Number(&apos;&apos;) // 0// 布尔值：true 转成 1，false 转成 0Number(true) // 1Number(false) // 0// undefined：转成 NaNNumber(undefined) // NaN// null：转成0Number(null) // 0//对象转化Number(&#123;a: 1&#125;) // NaNNumber(&#123;&#125;) //NaN //数组Number([1, 2, 3]) // NaNNumber([5]) // 5Number([]) //0 Number方法参数是对象时转换规则 第一步，调用对象自身的valueOf方法。如果返回原始类型的值，则直接对该值使用Number函数，不再进行后续步骤。 第二步，如果valueOf方法返回的还是对象，则改为调用对象自身的toString方法。如果toString方法返回原始类型的值，则对该值使用Number函数，不再进行后续步骤。 第三步，如果toString方法返回的是对象，就报错。 转换规则示例： 123456789var obj = &#123;x: 1&#125;;Number(obj) // NaN// 等同于if (typeof obj.valueOf() === &apos;object&apos;) &#123; Number(obj.toString());&#125; else &#123; Number(obj.valueOf());&#125; 先使用valueOf返回了对象本身，再代用toString()返回了”[object Object]” 注意：任何涉及NaN的操作都返回NaN，NaN和任何值不相等 Boolean除了以下值的转换结果为false，其他的值全部为true。 false, &#39;&#39;, 0, NaN, null, undefined String函数可以将任意类型的值转化成字符串（1）原始类型值 123456789101112131415//数值：转为相应的字符串。String(123) // &quot;123&quot;//字符串：转换后还是原来的值。String(&apos;abc&apos;) // &quot;abc&quot;//布尔值：true转为字符串&quot;true&quot;，false转为字符串&quot;false&quot;。String(true) // &quot;true&quot;//undefined：转为字符串&quot;undefined&quot;。String(undefined) // &quot;undefined&quot;//null：转为字符串&quot;null&quot;。String(null) // &quot;null&quot; （2）对象 123456//String方法的参数如果是对象，返回一个类型字符串String(&#123;a: 1&#125;) // &quot;[object Object]&quot;//如果是数组，返回该数组的字符串形式。String([1, 2, 3]) // &quot;1,2,3&quot; String方法背后的转换规则，与Number方法基本相同，只是互换了valueOf方法和toString方法的执行顺序。 隐式类型转换自动转化为布尔值if条件，while, 自动转换为字符串主要发生在字符串加法，一个值为字符串，另一个非字符串，则后者直接转为字符串 123&apos;5&apos; + 1 // &apos;51&apos;&apos;5&apos; + true // &quot;5true&quot;&apos;5&apos; + &#123;&#125; // &quot;5[object Object]&quot; 自动转化为数值除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。 12345++/--(自增自减运算符) + - * / %(算术运算符) + &gt; &lt; &gt;= &lt;= == != === !=== (关系运算符) 12345678910111213&apos;5&apos; - &apos;2&apos; // 3&apos;5&apos; * &apos;2&apos; // 10true - 1 // 0false / &apos;5&apos; // 0//&apos;abc&apos;转为数值为NaN,NaN任何运算都是NaN&apos;abc&apos; - 1 // NaN//null进行Number运算转成0null + 1 // 1//undefined转为数值时为NaNundefined + 1 // NaN == 运算符（1）原始类型的数据会转换成数值类型再进行比较。 123456789101112131415161718192021222324252627281 == true // true// 等同于 1 === Number(true)0 == false // true// 等同于 0 === Number(false)2 == true // false// 等同于 2 === Number(true)&apos;true&apos; == true // false// 等同于 Number(&apos;true&apos;) === Number(true)// 等同于 NaN === 1&apos;&apos; == 0 // true// 等同于 Number(&apos;&apos;) === 0// 等同于 0 === 0&apos;&apos; == false // true// 等同于 Number(&apos;&apos;) === Number(false)// 等同于 0 === 0&apos;1&apos; == true // true// 等同于 Number(&apos;1&apos;) === Number(true)// 等同于 1 === 1&apos;\n 123 \t&apos; == 123 // true// 因为字符串转为数字时，省略前置和后置的空格 （2）对象与原始类型值比较 对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。 12345678[1] == 1 // true// 等同于 Number([1]) == 1[1] == &apos;1&apos; // true// 等同于 Number([1]) == Number(&apos;1&apos;)[1] == true // true// 等同于 Number([1]) == Number(true) 实战练习12345678910111213141516171819202122232425262728293031323334353637383940//true,空数组valueOf还是空数组，toString()转成得到空字符串，空字符串调用Number转成0console.log([] == 0) //true //true，非的运算级别高，空数组转为布尔值为true,所以![]得到的false，Number转换为0， 最后结果还是trueconsole.log(![] == 0) //true //true,前面是调用valueOf()后调用toString()转成false，后边是非转成falseconsole.log([] == ![]) //false，2个数组放在堆里面，栈中存储的是地址console.log([] == []) //引用类型存储在堆中，栈中的是地址，所以是falseconsole.log(&#123;&#125; == &#123;&#125;) //&#123;&#125;.valueOf().toString()得到的是[object, Object], !&#123;&#125;得到的是false，Number转换后不相等console.log(&#123;&#125; == !&#123;&#125;)//数组的valueOf().toString()后为空，所以是真console.log([] == false) //true//因为对象调用valueOf后为&#123;&#125;, toString后转为[object, Object]，Number后是NaN,//任何涉及NaN的操作都返回NaN，NaN和任何值不相等console.log(&#123;&#125; == false) //false//空数组的boolean值为trueif([]) &#123;console.log(3)&#125; //3 //2个数组的栈地址不同if([1] == [1])&#123;console.log(4)&#125; //没有输出//false,转成2&gt;10console.log(&apos;2&apos; &gt; 10) //都是字符串，按照字符串的unicode转换，&apos;2&apos;.charCodeAt() &gt; &apos;10&apos;.charCodeAt = 50 &gt; 49console.log(&apos;2&apos; &gt; &apos;10&apos;) //都是字符串，按照字符串的unicode转换console.log(&apos;abc&apos; &gt; &apos;b&apos;) //false 参考：http://javascript.ruanyifeng.com/grammar/conversion.html]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
</search>
